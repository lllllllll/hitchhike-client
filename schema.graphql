schema {
  query: RootQuery
  mutation: Mutation
}

input AddTripInput {
  created_by: String!
  from: String!
  to: String!
  travel_time: Float!
}

type AddTripPayload {
  tripEdge: UserTripsEdge
}

type Mutation {
  addTrip(input: AddTripInput!): AddTripPayload
  updateTrip(input: UpdateTripInput!): Trip
  removeTrip(input: RemoveTripInput!): Trip
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

input RemoveTripInput {
  id: String!
}

type RootQuery {
  viewer(access_token: String!): User
  trip(id: String): Trip
  trips(created_by: String): [Trip]
}

type Trip {
  id: String
  created_at: Float
  created_by: User
  from: String
  to: String
  hitchhikers: [User]
  travel_time: Float
}

input UpdateTripInput {
  id: String!
  from: String
  to: String
  travel_time: Float
  hitchhikers: [String]
}

type User {
  id: String
  access_token: String
  is_admin: Boolean
  name: String
  oauth_id: String
  picture_url: String
  trips(first: Int, after: String): UserTripsConnection
}

type UserTripsConnection {
  edges: [UserTripsEdge]
  pageInfo: PageInfo
}

type UserTripsEdge {
  cursor: String!
  node: Trip
}

